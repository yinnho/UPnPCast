package com.yinnho.upnpcast.demo

import android.content.Intent
import android.graphics.Typeface
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.util.Log
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.launch
import android.view.Gravity
import android.view.Menu
import android.view.MenuItem
import android.widget.Button
import android.widget.LinearLayout
import android.widget.ScrollView
import android.widget.TextView
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.graphics.toColorInt
import com.yinnho.upnpcast.DLNACast

/**
 * üè† UPnPCast Demo ‰∏ªÈ°µ - ÁÆÄÊ¥ÅÁâàÊú¨
 */
class MainActivity : AppCompatActivity() {

    private val tag = "MainActivity"
    private lateinit var deviceListView: TextView
    private lateinit var statusView: TextView
    private val discoveredDevices = mutableListOf<DLNACast.Device>()
    
    // Èò≤Ê≠¢ÈáçÂ§çÊòæÁ§∫ÂØπËØùÊ°ÜÁöÑÊ†áÂøó
    private var isShowingMediaDialog = false
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        supportActionBar?.title = "UPnPCast Demo"
        
        createLayout()
        
        // ÂàùÂßãÂåñ
        DLNACast.init(this)
        
        log("üè† UPnPCast Demo ÂêØÂä®")
        log("üì± Âçï‰∏ÄÂØºÂÖ•Ëß£ÂÜ≥ÊâÄÊúâÈóÆÈ¢ò: import com.yinnho.upnpcast.DLNACast")
    }

    private fun createLayout() {
        val scrollView = ScrollView(this)
        val layout = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(20, 20, 20, 20)
        }

        // Ê†áÈ¢ò
        val titleView = TextView(this).apply {
            text = "üéØ UPnPCast Professional Demo"
            textSize = 20f
            setTypeface(null, Typeface.BOLD)
            setTextColor("#333333".toColorInt())
            gravity = Gravity.CENTER
            setPadding(0, 0, 0, 20)
        }
        layout.addView(titleView)

        // Áä∂ÊÄÅÊòæÁ§∫
        statusView = TextView(this).apply {
            text = "Áä∂ÊÄÅ: Â∞±Áª™"
            textSize = 14f
            setTextColor("#666666".toColorInt())
            setPadding(0, 0, 0, 10)
        }
        layout.addView(statusView)

        // ÂäüËÉΩÊåâÈíÆ
        val buttons = listOf(
            "üîç ÊêúÁ¥¢ËÆæÂ§á" to { searchDevices() },
            "üé¨ ÊµãËØïÊäïÂ±è" to { testCasting() },
            "üìä Ëé∑ÂèñÁä∂ÊÄÅ" to { getState() },
            "üéÆ Â™í‰ΩìÊéßÂà∂" to { showMediaControls() }
        )

        buttons.forEach { (text, action) ->
            val button = Button(this).apply {
                this.text = text
                textSize = 16f
                setPadding(20, 15, 20, 15)
                setOnClickListener { action() }
            }
            layout.addView(button)
        }

        // ËÆæÂ§áÂàóË°®
        val deviceTitle = TextView(this).apply {
            text = "ÂèëÁé∞ÁöÑËÆæÂ§á:"
            textSize = 16f
            setTypeface(null, Typeface.BOLD)
            setPadding(0, 20, 0, 10)
        }
        layout.addView(deviceTitle)

        deviceListView = TextView(this).apply {
            text = "Â∞öÊú™ÊêúÁ¥¢ËÆæÂ§á"
            textSize = 12f
            setTextColor("#666666".toColorInt())
            setBackgroundColor("#F5F5F5".toColorInt())
            setPadding(16, 16, 16, 16)
            // ËÆ©ËÆæÂ§áÂàóË°®ÂèØÁÇπÂáª
            setOnClickListener {
                if (discoveredDevices.isNotEmpty()) {
                    showDeviceSelectionDialog()
                }
            }
        }
        layout.addView(deviceListView)

        scrollView.addView(layout)
        setContentView(scrollView)
    }

    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        menu?.add(0, 1, 0, "APIÊºîÁ§∫")
        menu?.add(0, 2, 0, "ÊÄßËÉΩÁõëÊéß")
        menu?.add(0, 3, 0, "ÂÖ≥‰∫é")
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            1 -> {
                startActivity(Intent(this, ApiDemoActivity::class.java))
                true
            }
            2 -> {
                startActivity(Intent(this, PerformanceActivity::class.java))
                true
            }
            3 -> {
                showAboutDialog()
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }

    private fun showAboutDialog() {
        AlertDialog.Builder(this)
            .setTitle("ÂÖ≥‰∫é UPnPCast")
            .setMessage("üéØ ‰∏ì‰∏öÁöÑDLNAÊäïÂ±èÂ∫ì\n\n‚ú® ÁâπÊÄß:\n‚Ä¢ Èó®Èù¢Ê®°ÂºèËÆæËÆ°\n‚Ä¢ Á±ªÂûãÂÆâÂÖ®API\n‚Ä¢ È´òÊÄßËÉΩÂºÇÊ≠•Â§ÑÁêÜ\n‚Ä¢ ÂÆåÊï¥ÁöÑËÆæÂ§áÂèëÁé∞\n‚Ä¢ Êú¨Âú∞Êñá‰ª∂ÊäïÂ±è\n\nüèóÔ∏è Êû∂ÊûÑ:\n‚Ä¢ Âçï‰∏ÄÂÖ•Âè£ËÆæËÆ°\n‚Ä¢ ÂÜÖÈÉ®ÂÆûÁé∞ÈöêËóè\n‚Ä¢ ÂêëÂêéÂÖºÂÆπÊîØÊåÅ")
            .setPositiveButton("Á°ÆÂÆö", null)
            .show()
    }

    private fun searchDevices() {
        log("üîç ÂºÄÂßãÊêúÁ¥¢ËÆæÂ§á...")
        statusView.text = "Áä∂ÊÄÅ: ÊêúÁ¥¢‰∏≠..."
        discoveredDevices.clear()
        
        // ‰ΩøÁî®Êñ∞ÁöÑÂçèÁ®ãAPI
        lifecycleScope.launch {
            try {
                val devices = DLNACast.search(timeout = 5000)
                runOnUiThread {
                    discoveredDevices.clear()
                    discoveredDevices.addAll(devices)
                    log("üì± ÂÆûÊó∂Êõ¥Êñ∞: ÂèëÁé∞ ${devices.size} ‰∏™ËÆæÂ§á")
                    updateDeviceList()
                    
                    val statusText = "Áä∂ÊÄÅ: ÊêúÁ¥¢ÂÆåÊàê (${devices.size}‰∏™ËÆæÂ§á)"
                    statusView.text = statusText
                }
            } catch (e: Exception) {
                runOnUiThread {
                    log("‚ùå ÊêúÁ¥¢ËÆæÂ§áÂ§±Ë¥•: ${e.message}")
                    statusView.text = "Áä∂ÊÄÅ: ÊêúÁ¥¢Â§±Ë¥•"
                    deviceListView.text = "ÊêúÁ¥¢Â§±Ë¥•ÔºåËØ∑ÈáçËØï"
                }
            }
        }
    }

    private fun updateDeviceList() {
        if (discoveredDevices.isEmpty()) {
            deviceListView.text = "Êú™ÂèëÁé∞ËÆæÂ§á"
        } else {
            val deviceText = discoveredDevices.mapIndexed { index: Int, device: DLNACast.Device ->
                val icon = if (device.isTV) "üì∫" else "üì±"
                "${index + 1}. $icon ${device.name}\n   Âú∞ÂùÄ: ${device.address}"
            }.joinToString("\n\n")
            deviceListView.text = "$deviceText\n\nüí° ÁÇπÂáªÊ≠§Â§ÑÂèØÈÄâÊã©ËÆæÂ§áËøõË°åÊäïÂ±è"
        }
    }

    private fun showDeviceSelectionDialog() {
        val deviceNames = discoveredDevices.map { device ->
            val icon = if (device.isTV) "üì∫" else "üì±"
            "$icon ${device.name} (${device.address})"
        }.toTypedArray()

        AlertDialog.Builder(this)
            .setTitle("ÈÄâÊã©ÊäïÂ±èËÆæÂ§á")
            .setItems(deviceNames) { _, which ->
                val selectedDevice = discoveredDevices[which]
                performCastToDevice(selectedDevice)
            }
            .setNegativeButton("ÂèñÊ∂à", null)
            .show()
    }

    private fun testCasting() {
        if (discoveredDevices.isEmpty()) {
            AlertDialog.Builder(this)
                .setTitle("ÊèêÁ§∫")
                .setMessage("ËØ∑ÂÖàÊêúÁ¥¢ËÆæÂ§áÂÜçËøõË°åÊäïÂ±èÊµãËØï")
                .setPositiveButton("Á°ÆÂÆö", null)
                .show()
            return
        }

        showDeviceSelectionDialog()
    }

    private fun performCastToDevice(targetDevice: DLNACast.Device) {
        showMediaSelectionDialog(targetDevice)
    }
    
    private fun showMediaSelectionDialog(targetDevice: DLNACast.Device) {
        if (isShowingMediaDialog) {
            return
        }
        
        isShowingMediaDialog = true
        
        val layout = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(20, 20, 20, 20)
        }
        
        val mediaOptions = listOf(
            "üé¨ Big Buck Bunny (ÁªèÂÖ∏)" to {
                castMedia(targetDevice, 
                    "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4", 
                    "Big Buck Bunny")
            },
            "üåä Êµ∑Ê¥ãËßÜÈ¢ë (Êé®Ëçê)" to {
                castMedia(targetDevice, 
                    "http://vjs.zencdn.net/v/oceans.mp4", 
                    "Ocean Video")
            },
            "üé≠ Sintel Âä®ÁîªÁü≠Áâá" to {
                castMedia(targetDevice, 
                    "https://media.w3.org/2010/05/sintel/trailer.mp4", 
                    "Sintel Trailer")
            },
            "üöó Ë•øÁìúËßÜÈ¢ëDemo" to {
                castMedia(targetDevice, 
                    "https://sf1-cdn-tos.huoshanstatic.com/obj/media-fe/xgplayer_doc_video/mp4/xgplayer-demo-360p.mp4", 
                    "XiGua Player Demo")
            },
            "üì± ÈÄâÂèñÊú¨Âú∞ËßÜÈ¢ë" to {
                showLocalFileCastingOptions(targetDevice)
            },
            "‚úèÔ∏è ÊâãÂä®ËæìÂÖ•ÁΩëÁªúURL" to {
                showCustomUrlDialog(targetDevice)
            }
        )
        
        mediaOptions.forEach { option ->
            val text = option.first
            val action = option.second
            val button = Button(this).apply {
                this.text = text
                textSize = 14f
                setPadding(20, 15, 20, 15)
                setOnClickListener {
                    isShowingMediaDialog = false
                    action()
                }
            }
            layout.addView(button)
        }
        
        val dialog = AlertDialog.Builder(this)
            .setTitle("ÈÄâÊã©Ë¶ÅÊäïÂ±èÁöÑÂ™í‰Ωì")
            .setMessage("ÊäïÂ±èÂà∞: ${targetDevice.name}")
            .setView(layout)
            .setNegativeButton("ÂèñÊ∂à") { _, _ ->
                isShowingMediaDialog = false
            }
            .setOnDismissListener {
                isShowingMediaDialog = false
            }
            .create()
            
        dialog.show()
    }
    
    private fun showLocalFileCastingOptions(targetDevice: DLNACast.Device) {
                        VideoSelectorActivity.start(this, targetDevice)
    }
    
    private fun showCustomUrlDialog(targetDevice: DLNACast.Device) {
        val layout = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(50, 20, 50, 20)
        }
        
        val urlInput = android.widget.EditText(this).apply {
            hint = "ËØ∑ËæìÂÖ•Â™í‰ΩìURL (http://...)"
            setText("http://")
        }
        
        val titleInput = android.widget.EditText(this).apply {
            hint = "Â™í‰ΩìÊ†áÈ¢ò (ÂèØÈÄâ)"
        }
        
        val tipText = TextView(this).apply {
            text = "üí° ÊîØÊåÅÊ†ºÂºè: MP4, MP3, JPG, PNG Á≠â\nüì± Á§∫‰æã: http://example.com/video.mp4"
            textSize = 12f
            setTextColor("#666666".toColorInt())
            setPadding(0, 10, 0, 0)
        }
        
        layout.addView(TextView(this).apply { 
            text = "Â™í‰ΩìURL:" 
            textSize = 14f
            setPadding(0, 0, 0, 5)
        })
        layout.addView(urlInput)
        
        layout.addView(TextView(this).apply { 
            text = "Ê†áÈ¢ò:" 
            textSize = 14f 
            setPadding(0, 15, 0, 5)
        })
        layout.addView(titleInput)
        layout.addView(tipText)
        
        AlertDialog.Builder(this)
            .setTitle("ËæìÂÖ•Ëá™ÂÆö‰πâÂ™í‰Ωì")
            .setMessage("ÊäïÂ±èÂà∞: ${targetDevice.name}")
            .setView(layout)
            .setPositiveButton("ÊäïÂ±è") { _, _ ->
                val url = urlInput.text.toString().trim()
                val title = titleInput.text.toString().trim().ifEmpty { "Ëá™ÂÆö‰πâÂ™í‰Ωì" }
                
                if (url.isNotEmpty() && url.startsWith("http")) {
                    castMedia(targetDevice, url, title)
                } else {
                    AlertDialog.Builder(this)
                        .setTitle("ËæìÂÖ•ÈîôËØØ")
                        .setMessage("ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑHTTP URL")
                        .setPositiveButton("ÈáçÊñ∞ËæìÂÖ•") { _, _ -> showCustomUrlDialog(targetDevice) }
                        .setNegativeButton("ÂèñÊ∂à", null)
                        .show()
                }
            }
            .setNegativeButton("ÂèñÊ∂à", null)
            .show()
    }
    
    private fun castMedia(targetDevice: DLNACast.Device, url: String, title: String) {
        log("üé¨ ÂºÄÂßãÊäïÂ±è: $title Âà∞: ${targetDevice.name}")
        log("üì∫ URL: $url")
        log("üîç ÁõÆÊ†áËÆæÂ§áID: ${targetDevice.id}")
        statusView.text = "Áä∂ÊÄÅ: ÊäïÂ±è‰∏≠..."
        
        // ÊòæÁ§∫ÊäïÂ±èËøõÂ∫¶ÂØπËØùÊ°Ü
        val progressDialog = AlertDialog.Builder(this)
            .setTitle("Ê≠£Âú®ÊäïÂ±è")
            .setMessage("Ê≠£Âú®ËøûÊé•Âà∞ ${targetDevice.name}...\nÂ™í‰Ωì: $title")
            .setCancelable(false)
            .create()
        progressDialog.show()
        
        // ‰ΩøÁî®Êñ∞ÁöÑÂçèÁ®ãAPIÁõ¥Êé•ÂêëÊåáÂÆöËÆæÂ§áÊäïÂ±è
        lifecycleScope.launch {
            try {
                val success = DLNACast.castToDevice(targetDevice, url, title)
                runOnUiThread {
                    progressDialog.dismiss()
                    
                    if (success) {
                        log("‚úÖ ÊäïÂ±èÊàêÂäü: $title Âà∞: ${targetDevice.name}")
                        statusView.text = "Áä∂ÊÄÅ: Ê≠£Âú®Êí≠Êîæ $title"
                        
                        // ÊòæÁ§∫ÊàêÂäüÂØπËØùÊ°Ü
                        AlertDialog.Builder(this@MainActivity)
                            .setTitle("ÊäïÂ±èÊàêÂäü")
                            .setMessage("üì∫ ËÆæÂ§á: ${targetDevice.name}\nüé¨ Â™í‰Ωì: $title\n\nÁé∞Âú®ÂèØ‰ª•‰ΩøÁî®Â™í‰ΩìÊéßÂà∂ÂäüËÉΩ")
                            .setPositiveButton("Á°ÆÂÆö", null)
                            .setNeutralButton("Â™í‰ΩìÊéßÂà∂") { _, _ -> showMediaControls() }
                            .show()
                    } else {
                        log("‚ùå ÊäïÂ±èÂ§±Ë¥•: $title")
                        statusView.text = "Áä∂ÊÄÅ: ÊäïÂ±èÂ§±Ë¥•"
                        
                        // ÊòæÁ§∫Â§±Ë¥•ÂØπËØùÊ°ÜÔºåÂåÖÂê´ËØ¶ÁªÜÈîôËØØ‰ø°ÊÅØ
                        AlertDialog.Builder(this@MainActivity)
                            .setTitle("ÊäïÂ±èÂ§±Ë¥•")
                            .setMessage("üì∫ ÁõÆÊ†áËÆæÂ§á: ${targetDevice.name}\nüé¨ Â™í‰Ωì: $title\n\nÂèØËÉΩÁöÑÂéüÂõ†:\n‚Ä¢ ËÆæÂ§á‰∏çÂú®Á∫ø\n‚Ä¢ Â™í‰ΩìÊ†ºÂºè‰∏çÊîØÊåÅ\n‚Ä¢ ÁΩëÁªúËøûÊé•ÈóÆÈ¢ò")
                            .setPositiveButton("ÈáçËØï") { _, _ -> castMedia(targetDevice, url, title) }
                            .setNegativeButton("ÂèñÊ∂à", null)
                            .show()
                    }
                }
            } catch (e: Exception) {
                runOnUiThread {
                    progressDialog.dismiss()
                    log("‚ùå ÊäïÂ±èÂºÇÂ∏∏: ${e.message}")
                    statusView.text = "Áä∂ÊÄÅ: ÊäïÂ±èÂºÇÂ∏∏"
                    
                    AlertDialog.Builder(this@MainActivity)
                        .setTitle("ÊäïÂ±èÂºÇÂ∏∏")
                        .setMessage("üì∫ ÁõÆÊ†áËÆæÂ§á: ${targetDevice.name}\nüé¨ Â™í‰Ωì: $title\n\nÈîôËØØ‰ø°ÊÅØ: ${e.message}")
                        .setPositiveButton("ÈáçËØï") { _, _ -> castMedia(targetDevice, url, title) }
                        .setNegativeButton("ÂèñÊ∂à", null)
                        .show()
                }
            }
        }
    }

    private fun getState() {
        val state = DLNACast.getState()
        log("üìä ÂΩìÂâçÁä∂ÊÄÅ:")
        log("  ËøûÊé•: ${if (state.isConnected) "Â∑≤ËøûÊé•" else "Êú™ËøûÊé•"}")
        log("  Êí≠ÊîæÁä∂ÊÄÅ: ${state.playbackState}")
        log("  ÂΩìÂâçËÆæÂ§á: ${state.currentDevice?.name ?: "Êó†"}")
        log("  Êí≠Êîæ‰∏≠: ${state.isPlaying}")
        log("  Èü≥Èáè: ${if (state.volume >= 0) "${state.volume}%" else "Êú™Áü•"}")
        
        // Âú®ÁïåÈù¢‰∏äÊòæÁ§∫Áä∂ÊÄÅ‰ø°ÊÅØ
        val stateInfo = buildString {
            append("üìä ÂΩìÂâçDLNAÁä∂ÊÄÅ\n")
            append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
            append("üîó ËøûÊé•Áä∂ÊÄÅ: ${if (state.isConnected) "‚úÖ Â∑≤ËøûÊé•" else "‚ùå Êú™ËøûÊé•"}\n")
            append("üì∫ ÂΩìÂâçËÆæÂ§á: ${state.currentDevice?.name ?: "Êó†"}\n")
            append("üé¨ Êí≠ÊîæÁä∂ÊÄÅ: ${getPlaybackStateDisplay(state.playbackState)}\n")
            append("‚ñ∂Ô∏è Ê≠£Âú®Êí≠Êîæ: ${if (state.isPlaying) "ÊòØ" else "Âê¶"}\n")
            append("‚è∏Ô∏è Â∑≤ÊöÇÂÅú: ${if (state.isPaused) "ÊòØ" else "Âê¶"}\n")
            append("üîä Èü≥Èáè: ${if (state.volume >= 0) "${state.volume}%" else "Êú™Áü•"}\n")
            append("üîá ÈùôÈü≥: ${if (state.isMuted) "ÊòØ" else "Âê¶"}\n")
            
            state.currentDevice?.let { device ->
                append("\nüì± ËÆæÂ§áËØ¶ÊÉÖ:\n")
                append("  ‚Ä¢ ID: ${device.id}\n")
                append("  ‚Ä¢ Âú∞ÂùÄ: ${device.address}\n")
                append("  ‚Ä¢ Á±ªÂûã: ${if (device.isTV) "ÁîµËßÜ" else "Â™í‰ΩìËÆæÂ§á"}\n")
            }
        }
        
        AlertDialog.Builder(this)
            .setTitle("DLNAÁä∂ÊÄÅËØ¶ÊÉÖ")
            .setMessage(stateInfo)
            .setPositiveButton("Á°ÆÂÆö", null)
            .setNeutralButton("Âà∑Êñ∞") { _, _ -> getState() }
            .show()
            
        // Êõ¥Êñ∞Áä∂ÊÄÅÊ†è
        statusView.text = if (state.isConnected) {
            "Áä∂ÊÄÅ: Â∑≤ËøûÊé•Âà∞ ${state.currentDevice?.name} - ${getPlaybackStateDisplay(state.playbackState)}"
        } else {
            "Áä∂ÊÄÅ: Êú™ËøûÊé•"
        }
    }
    
    private fun getPlaybackStateDisplay(playbackState: DLNACast.PlaybackState): String {
        return when (playbackState) {
            DLNACast.PlaybackState.IDLE -> "Á©∫Èó≤"
            DLNACast.PlaybackState.PLAYING -> "üé¨ Êí≠Êîæ‰∏≠"
            DLNACast.PlaybackState.PAUSED -> "‚è∏Ô∏è Â∑≤ÊöÇÂÅú"
            DLNACast.PlaybackState.STOPPED -> "‚èπÔ∏è Â∑≤ÂÅúÊ≠¢"
            DLNACast.PlaybackState.BUFFERING -> "‚è≥ ÁºìÂÜ≤‰∏≠"
            DLNACast.PlaybackState.ERROR -> "‚ùå ÈîôËØØ"
        }
    }

    private fun showMediaControls() {
        // ÂêØÂä®‰∏ìÈó®ÁöÑÂ™í‰ΩìÊéßÂà∂ÁïåÈù¢
        MediaControlActivity.start(this)
    }

    private fun log(message: String) {
        Log.d(tag, message)
    }
    
    override fun onDestroy() {
        super.onDestroy()
        DLNACast.cleanup()
    }
}
